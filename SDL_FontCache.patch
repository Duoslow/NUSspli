diff --git a/SDL_FontCache.c b/SDL_FontCache.c
index e534622..9551c32 100644
--- a/SDL_FontCache.c
+++ b/SDL_FontCache.c
@@ -463,14 +463,11 @@ static FC_Rect FC_RenderCenter(FC_Font* font, FC_Target* dest, float x, float y,
 static FC_Rect FC_RenderRight(FC_Font* font, FC_Target* dest, float x, float y, FC_Scale scale, const char* text);
 
 
-static_inline SDL_Surface* FC_CreateSurface32(Uint32 width, Uint32 height)
-{
-    #if SDL_BYTEORDER == SDL_BIG_ENDIAN
-        return SDL_CreateRGBSurface(SDL_SWSURFACE, width, height, 32, 0xFF000000, 0x00FF0000, 0x0000FF00, 0x000000FF);
-    #else
-        return SDL_CreateRGBSurface(SDL_SWSURFACE, width, height, 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000);
-    #endif
-}
+#if SDL_BYTEORDER == SDL_BIG_ENDIAN
+#define FC_CreateSurface32(width, height) SDL_CreateRGBSurface(0, width, height, 32, 0xFF000000, 0x00FF0000, 0x0000FF00, 0x000000FF)
+#else
+#define FC_CreateSurface32(width, height) SDL_CreateRGBSurface(0, width, height, 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000)
+#endif
 
 
 char* U8_alloc(unsigned int size)
@@ -1223,7 +1220,13 @@ Uint8 FC_LoadFontFromTTF(FC_Font* font, SDL_Renderer* renderer, TTF_Font* ttf, S
         unsigned int h = font->height*12;
         SDL_Surface* surfaces[FC_LOAD_MAX_SURFACES];
         int num_surfaces = 1;
+        int i = 0;
         surfaces[0] = FC_CreateSurface32(w, h);
+        if(surfaces[0] == NULL)
+        {
+            debugPrintf("!!! NULL SURFACE (%s) !!!!", SDL_GetError());
+            return 0;
+        }
         font->last_glyph.rect.x = FC_CACHE_PADDING;
         font->last_glyph.rect.y = FC_CACHE_PADDING;
         font->last_glyph.rect.w = 0;
@@ -1240,15 +1243,13 @@ Uint8 FC_LoadFontFromTTF(FC_Font* font, SDL_Renderer* renderer, TTF_Font* ttf, S
                 continue;
 
             // Try packing.  If it fails, create a new surface for the next cache level.
-            packed = (FC_PackGlyphData(font, FC_GetCodepointFromUTF8(&buff_ptr, 0), glyph_surf->w, surfaces[num_surfaces-1]->w, surfaces[num_surfaces-1]->h) != NULL);
+            packed = (FC_PackGlyphData(font, FC_GetCodepointFromUTF8(&buff_ptr, 0), glyph_surf->w, surfaces[i]->w, surfaces[i]->h) != NULL);
             if(!packed)
             {
-                int i = num_surfaces-1;
                 if(num_surfaces >= FC_LOAD_MAX_SURFACES)
                 {
                     // Can't do any more!
                     FC_Log("SDL_FontCache error: Could not create enough cache surfaces to fit all of the loading string!\n");
-                    SDL_FreeSurface(glyph_surf);
                     break;
                 }
 
@@ -1264,22 +1265,23 @@ Uint8 FC_LoadFontFromTTF(FC_Font* font, SDL_Renderer* renderer, TTF_Font* ttf, S
 
                 surfaces[num_surfaces] = FC_CreateSurface32(w, h);
                 num_surfaces++;
+                i++;
+                packed = (FC_PackGlyphData(font, FC_GetCodepointFromUTF8(&buff_ptr, 0), glyph_surf->w, surfaces[i]->w, surfaces[i]->h) != NULL);
             }
 
             // Try packing for the new surface, then blit onto it.
-            if(packed || FC_PackGlyphData(font, FC_GetCodepointFromUTF8(&buff_ptr, 0), glyph_surf->w, surfaces[num_surfaces-1]->w, surfaces[num_surfaces-1]->h) != NULL)
+            if(packed)
             {
                 SDL_SetSurfaceBlendMode(glyph_surf, SDL_BLENDMODE_NONE);
                 SDL_Rect srcRect = {0, 0, glyph_surf->w, glyph_surf->h};
                 SDL_Rect destrect = font->last_glyph.rect;
-                SDL_BlitSurface(glyph_surf, &srcRect, surfaces[num_surfaces-1], &destrect);
+                SDL_BlitSurface(glyph_surf, &srcRect, surfaces[i], &destrect);
             }
 
             SDL_FreeSurface(glyph_surf);
         }
 
         {
-            int i = num_surfaces-1;
             FC_UploadGlyphCache(font, i, surfaces[i]);
             SDL_FreeSurface(surfaces[i]);
             #ifndef FC_USE_SDL_GPU
diff --git a/SDL_FontCache.h b/SDL_FontCache.h
index 77f5fb4..878570f 100644
--- a/SDL_FontCache.h
+++ b/SDL_FontCache.h
@@ -33,11 +33,11 @@ THE SOFTWARE.
 #ifndef _SDL_FONTCACHE_H__
 #define _SDL_FONTCACHE_H__
 
-#include "SDL.h"
-#include "SDL_ttf.h"
+#include "SDL2/SDL.h"
+#include "SDL2/SDL_ttf.h"
 
 #ifdef FC_USE_SDL_GPU
-    #include "SDL_gpu.h"
+    #include "SDL2/SDL_gpu.h"
 #endif
 
 
@@ -60,10 +60,11 @@ extern "C" {
 #define FC_Image GPU_Image
 #define FC_Log GPU_LogError
 #else
+#include <utils.h>
 #define FC_Rect SDL_Rect
 #define FC_Target SDL_Renderer
 #define FC_Image SDL_Texture
-#define FC_Log SDL_Log
+#define FC_Log debugPrintf
 #endif
 
 
